// В ходе анализа результатов переписи населения информация была сохранена
// в объекте типа map:

// groupCity := map[int][]string{
// 	10:   []string{...}, // города с населением 10-99 тыс. человек
// 	100:  []string{...}, // города с населением 100-999 тыс. человек
// 	1000: []string{...}, // города с населением 1000 тыс. человек и более
// }
// При подготовке важного отчета о городах с населением 100-999 тыс. человек
// был подготовлен другой объект типа map:

// cityPopulation := map[string]int{
// 	город: население города в тысячах человек,
// }

// Однако база данных с информацией о точной численности населения содержала ошибки,
// поэтому в cityPopulation в т.ч. была сохранена информация о городах, которые входят
// в другие группы из groupCity.

// Ваша программа имеет доступ к обоим указанным отображениям, требуется исправить
// cityPopulation, чтобы в ней была сохранена информация только о городах из группы
// groupCity[100].

// Функция main() уже объявлена, доступ к отображениям осуществляется по указанным именам.
// По результатам выполнения ничего больше делать не требуется, проверка будет
// осуществлена автоматически.

package main

import "fmt"

func main() {

	groupCity := map[int][]string{
		10:   {},                                   // города с населением 10-99 тыс. человек
		100:  {"Москва", "Питер", "Уфа", "Липецк"}, // города с населением 100-999 тыс. человек
		1000: {},                                   // города с населением 1000 тыс. человек и более
	}

	cityPopulation := map[string]int{
		"Москва":  950000,
		"Питер":   800000,
		"Уфа":     750000,
		"Саратов": 99000,
		"Липецк":  650000,
	}

	var keys []string

	for _, v := range groupCity[100] {
		keys = append(keys, v)
	}

	for i := range cityPopulation {

		var match bool

		for _, vk := range keys {
			if i == vk {
				match = true
			}
		}
		if !match {
			delete(cityPopulation, i)
		}
	}

	fmt.Println(cityPopulation)
}
